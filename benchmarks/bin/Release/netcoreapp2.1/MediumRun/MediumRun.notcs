
#define RETURNS_VOID_0
#define RETURNS_VOID_1
using System;
using System.Diagnostics;
using System.Linq; // must not be removed, used by SmartParameter and SmartArgument
using System.Threading;
using System.Reflection;
using System.Runtime.CompilerServices;
using BenchmarkDotNet;
using BenchmarkDotNet.Characteristics;
using BenchmarkDotNet.Environments;
using BenchmarkDotNet.Jobs;
using BenchmarkDotNet.Extensions;
using BenchmarkDotNet.Helpers;
using BenchmarkDotNet.Running;
using BenchmarkDotNet.Engines;
using BenchmarkDotNet.Validators;
using benchmarks;
using System;



// the namespace name must be in sync with WindowsDisassembler.BuildArguments
namespace BenchmarkDotNet.Autogenerated
{
    public class UniqueProgramName // we need different name than typical "Program" to avoid problems with referencing "Program" types from benchmarked code, #691
    {
        
        public static int Main(string[] args)
        {
            // this method MUST NOT have any dependencies to BenchmarkDotNet and any other external dlls! (CoreRT is exception from this rule)
            // otherwise if LINQPad's shadow copy is enabled, we will not register for AssemblyLoading event
            // before .NET Framework tries to load it for this method
            HelpAssemblyResolving();
            return AfterAssemblyLoadingAttached(args);
        }

        private static int AfterAssemblyLoadingAttached(string[] args)
        {
            var host = new BenchmarkDotNet.Engines.ConsoleHost(Console.Out, Console.In); // this variable name is used by CodeGenerator.GetCoreRtSwitch, do NOT change it

            // the first thing to do is to let diagnosers hook in before anything happens
            // so all jit-related diagnosers can catch first jit compilation!
            host.BeforeAnythingElse();

            try
            {
                // we are not using Runnable here in any direct way in order to avoid strong dependency Main<=>Runnable
                // which could cause the jitting/assembly loading to happen before we do anything
                // we have some jitting diagnosers and we want them to catch all the informations!!

                string benchmarkName = args.SkipWhile(arg => arg != "--benchmarkName").Skip(1).FirstOrDefault() ?? "not provided"; // this variable name is used by CodeGenerator.GetCoreRtSwitch, do NOT change it
                int id = int.Parse(args.Last()); // this variable name is used by CodeGenerator.GetCoreRtSwitch, do NOT change it

#if CORERT
                
#else
                Type type = typeof(UniqueProgramName).GetTypeInfo().Assembly.GetType($"BenchmarkDotNet.Autogenerated.Runnable_{id}");
                type.GetMethod("Run", BindingFlags.Public | BindingFlags.Static).Invoke(null, new object[] { host, benchmarkName });
#endif
                return 0;
            }
            catch (Exception oom) when (oom is OutOfMemoryException || oom is TargetInvocationException reflection && reflection.InnerException is OutOfMemoryException)
            {
                host.WriteLine();
                host.WriteLine("OutOfMemoryException!");
                host.WriteLine("BenchmarkDotNet continues to run additional iterations until desired accuracy level is achieved. It's possible only if the benchmark method doesn't have any side-effects.");
                host.WriteLine("If your benchmark allocates memory and keeps it alive, you are creating a memory leak.");
                host.WriteLine("You should redesign your benchmark and remove the side-effects. You can use `OperationsPerInvoke`, `IterationSetup` and `IterationCleanup` to do that.");
                host.WriteLine();
                host.WriteLine(oom.ToString());

                return -1;
            }
            catch(Exception ex)
            {
                host.WriteLine();
                host.WriteLine(ex.ToString());
                return -1;
            }
            finally
            {
                host.AfterAll();
            }
        }

        private static void HelpAssemblyResolving()
        {
#if SHADOWCOPY
            AppDomain.CurrentDomain.AssemblyResolve += (_, args) =>
            {
                const string shadowCopyFolderPath = @"";

                var guessedPath = System.IO.Path.Combine(shadowCopyFolderPath, $"{new System.Reflection.AssemblyName(args.Name).Name}.dll");

                return System.IO.File.Exists(guessedPath) ? System.Reflection.Assembly.LoadFrom(guessedPath) : null;
            };
#endif
        }
    }

        // the type name must be in sync with WindowsDisassembler.BuildArguments
    public class Runnable_0 : global::benchmarks.MyBenchmark
    {
        public static void Run(BenchmarkDotNet.Engines.IHost host, string benchmarkName)
        {
            Runnable_0 instance = new Runnable_0(); // do NOT change name "instance" (used in SmartParamameter)
            

            host.WriteLine();
            foreach (var infoLine in BenchmarkEnvironmentInfo.GetCurrent().ToFormattedString())
            {
                host.WriteLine("// {0}", infoLine);
            }
            var job = new BenchmarkDotNet.Jobs.Job(); // use full name to avoid naming conflicts, #778
            BenchmarkDotNet.Characteristics.CharacteristicObject.IdCharacteristic[job] = $@"MediumRun";
                BenchmarkDotNet.Jobs.RunMode.IterationCountCharacteristic[job] = 15;
                BenchmarkDotNet.Jobs.RunMode.LaunchCountCharacteristic[job] = 2;
                BenchmarkDotNet.Jobs.RunMode.WarmupCountCharacteristic[job] = 10;
            job.Freeze();
            host.WriteLine("// Job: {0}", job.DisplayInfo);
            host.WriteLine();

            var errors = BenchmarkEnvironmentInfo.Validate(job);
            if (ValidationErrorReporter.ReportIfAny(errors, host))
                return;

            var engineParameters = new BenchmarkDotNet.Engines.EngineParameters()
            {
                Host = host,
                WorkloadActionUnroll = instance.WorkloadActionUnroll,
                WorkloadActionNoUnroll = instance.WorkloadActionNoUnroll,
                Dummy1Action = instance.Dummy1,
                Dummy2Action = instance.Dummy2,
                Dummy3Action = instance.Dummy3,
                OverheadActionNoUnroll = instance.OverheadActionNoUnroll,
                OverheadActionUnroll = instance.OverheadActionUnroll,
                GlobalSetupAction = instance.globalSetupAction,
                GlobalCleanupAction = instance.globalCleanupAction,
                IterationSetupAction = instance.iterationSetupAction,
                IterationCleanupAction = instance.iterationCleanupAction,
                TargetJob = job,
                OperationsPerInvoke = 1,
                MeasureGcStats = false,
                Encoding = System.Text.Encoding.ASCII,
                BenchmarkName = benchmarkName
            };

            using (var engine = new BenchmarkDotNet.Engines.EngineFactory().CreateReadyToRun(engineParameters))
            {
                var results = engine.Run();

                host.ReportResults(results); // printing costs memory, do this after runs

                instance.__TrickTheJIT__(); // compile the method for disassembler, but without actual run of the benchmark ;)
            }
        }

        public delegate void OverheadDelegate( System.Double arg0,  System.Double arg1,  System.Double arg2);

        public delegate  void WorkloadDelegate( System.Double arg0,  System.Double arg1,  System.Double arg2);

        public Runnable_0()
        {
            globalSetupAction = () => { };
            globalCleanupAction = () => { };
            iterationSetupAction = () => { };
            iterationCleanupAction = () => { };
            overheadDelegate = __Overhead;
            workloadDelegate = Bench;
            __argField0 = 5500;
__argField1 = 10;
__argField2 = 4;
        }

        private Action globalSetupAction;
        private Action globalCleanupAction;
        private Action iterationSetupAction;
        private Action iterationCleanupAction;
        private OverheadDelegate overheadDelegate;
        private WorkloadDelegate workloadDelegate;
        private System.Double __argField0;
private System.Double __argField1;
private System.Double __argField2;

        // this method is used only for the disassembly diagnoser purposes
        // the goal is to get this and the benchmarked method jitted, but without executing the benchmarked method itself
        public int NotEleven;
        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoOptimization | System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
        public void __TrickTheJIT__()
        {
            NotEleven = new System.Random(123).Next(0, 10);
            __ForDisassemblyDiagnoser__();
        }

        private int dummyVar;

        [MethodImpl(MethodImplOptions.NoInlining)]
        private void Dummy1()
        {
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        private void Dummy2()
        {
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        private void Dummy3()
        {
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
        }

        private void __Overhead( System.Double arg0,  System.Double arg1,  System.Double arg2) // __ is to avoid possible name conflict
        {
            
        }

#if RETURNS_CONSUMABLE_0

        private BenchmarkDotNet.Engines.Consumer consumer = new BenchmarkDotNet.Engines.Consumer();

        private void OverheadActionUnroll(long invokeCount)
        {
             System.Double arg0 =  __argField0;
 System.Double arg1 =  __argField1;
 System.Double arg2 =  __argField2;
            for (long i = 0; i < invokeCount; i++)
            {
                consumer.Consume(overheadDelegate( arg0,  arg1,  arg2));
                consumer.Consume(overheadDelegate( arg0,  arg1,  arg2));
                consumer.Consume(overheadDelegate( arg0,  arg1,  arg2));
                consumer.Consume(overheadDelegate( arg0,  arg1,  arg2));
                consumer.Consume(overheadDelegate( arg0,  arg1,  arg2));
                consumer.Consume(overheadDelegate( arg0,  arg1,  arg2));
                consumer.Consume(overheadDelegate( arg0,  arg1,  arg2));
                consumer.Consume(overheadDelegate( arg0,  arg1,  arg2));
                consumer.Consume(overheadDelegate( arg0,  arg1,  arg2));
                consumer.Consume(overheadDelegate( arg0,  arg1,  arg2));
                consumer.Consume(overheadDelegate( arg0,  arg1,  arg2));
                consumer.Consume(overheadDelegate( arg0,  arg1,  arg2));
                consumer.Consume(overheadDelegate( arg0,  arg1,  arg2));
                consumer.Consume(overheadDelegate( arg0,  arg1,  arg2));
                consumer.Consume(overheadDelegate( arg0,  arg1,  arg2));
                consumer.Consume(overheadDelegate( arg0,  arg1,  arg2));
            }
        }

        private void OverheadActionNoUnroll(long invokeCount)
        {
             System.Double arg0 =  __argField0;
 System.Double arg1 =  __argField1;
 System.Double arg2 =  __argField2;
            for (long i = 0; i < invokeCount; i++)
            {
                consumer.Consume(overheadDelegate( arg0,  arg1,  arg2));
            }
        }
        
        private void WorkloadActionUnroll(long invokeCount)
        {
             System.Double arg0 =  __argField0;
 System.Double arg1 =  __argField1;
 System.Double arg2 =  __argField2;
            for (long i = 0; i < invokeCount; i++)
            {
                consumer.Consume(workloadDelegate( arg0,  arg1,  arg2));
                consumer.Consume(workloadDelegate( arg0,  arg1,  arg2));
                consumer.Consume(workloadDelegate( arg0,  arg1,  arg2));
                consumer.Consume(workloadDelegate( arg0,  arg1,  arg2));
                consumer.Consume(workloadDelegate( arg0,  arg1,  arg2));
                consumer.Consume(workloadDelegate( arg0,  arg1,  arg2));
                consumer.Consume(workloadDelegate( arg0,  arg1,  arg2));
                consumer.Consume(workloadDelegate( arg0,  arg1,  arg2));
                consumer.Consume(workloadDelegate( arg0,  arg1,  arg2));
                consumer.Consume(workloadDelegate( arg0,  arg1,  arg2));
                consumer.Consume(workloadDelegate( arg0,  arg1,  arg2));
                consumer.Consume(workloadDelegate( arg0,  arg1,  arg2));
                consumer.Consume(workloadDelegate( arg0,  arg1,  arg2));
                consumer.Consume(workloadDelegate( arg0,  arg1,  arg2));
                consumer.Consume(workloadDelegate( arg0,  arg1,  arg2));
                consumer.Consume(workloadDelegate( arg0,  arg1,  arg2));
            }
        }

        private void WorkloadActionNoUnroll(long invokeCount)
        {
             System.Double arg0 =  __argField0;
 System.Double arg1 =  __argField1;
 System.Double arg2 =  __argField2;
            for (long i = 0; i < invokeCount; i++)
            {
                consumer.Consume(workloadDelegate( arg0,  arg1,  arg2));
            }
        }
        
        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
        public void __ForDisassemblyDiagnoser__()
        {
            if (NotEleven == 11)
            {
                 System.Double arg0 =  __argField0;
 System.Double arg1 =  __argField1;
 System.Double arg2 =  __argField2;
                return Bench( arg0,  arg1,  arg2);
            }
            
            return default(void);
        }

#elif RETURNS_NON_CONSUMABLE_STRUCT_0

        private void OverheadActionUnroll(long invokeCount)
        {
             System.Double arg0 =  __argField0;
 System.Double arg1 =  __argField1;
 System.Double arg2 =  __argField2;
            void result = default(void);
            for (long i = 0; i < invokeCount; i++)
            {
                result = overheadDelegate( arg0,  arg1,  arg2);
                result = overheadDelegate( arg0,  arg1,  arg2);
                result = overheadDelegate( arg0,  arg1,  arg2);
                result = overheadDelegate( arg0,  arg1,  arg2);
                result = overheadDelegate( arg0,  arg1,  arg2);
                result = overheadDelegate( arg0,  arg1,  arg2);
                result = overheadDelegate( arg0,  arg1,  arg2);
                result = overheadDelegate( arg0,  arg1,  arg2);
                result = overheadDelegate( arg0,  arg1,  arg2);
                result = overheadDelegate( arg0,  arg1,  arg2);
                result = overheadDelegate( arg0,  arg1,  arg2);
                result = overheadDelegate( arg0,  arg1,  arg2);
                result = overheadDelegate( arg0,  arg1,  arg2);
                result = overheadDelegate( arg0,  arg1,  arg2);
                result = overheadDelegate( arg0,  arg1,  arg2);
                result = overheadDelegate( arg0,  arg1,  arg2);
            }
            DeadCodeEliminationHelper.KeepAliveWithoutBoxing(result);
        }

        private void OverheadActionNoUnroll(long invokeCount)
        {
             System.Double arg0 =  __argField0;
 System.Double arg1 =  __argField1;
 System.Double arg2 =  __argField2;
            void result = default(void);
            for (long i = 0; i < invokeCount; i++)
            {
                result = overheadDelegate( arg0,  arg1,  arg2);
            }
            DeadCodeEliminationHelper.KeepAliveWithoutBoxing(result);
        }

        private void WorkloadActionUnroll(long invokeCount)
        {
             System.Double arg0 =  __argField0;
 System.Double arg1 =  __argField1;
 System.Double arg2 =  __argField2;
            void result = default(void);
            for (long i = 0; i < invokeCount; i++)
            {
                result = workloadDelegate( arg0,  arg1,  arg2);
                result = workloadDelegate( arg0,  arg1,  arg2);
                result = workloadDelegate( arg0,  arg1,  arg2);
                result = workloadDelegate( arg0,  arg1,  arg2);
                result = workloadDelegate( arg0,  arg1,  arg2);
                result = workloadDelegate( arg0,  arg1,  arg2);
                result = workloadDelegate( arg0,  arg1,  arg2);
                result = workloadDelegate( arg0,  arg1,  arg2);
                result = workloadDelegate( arg0,  arg1,  arg2);
                result = workloadDelegate( arg0,  arg1,  arg2);
                result = workloadDelegate( arg0,  arg1,  arg2);
                result = workloadDelegate( arg0,  arg1,  arg2);
                result = workloadDelegate( arg0,  arg1,  arg2);
                result = workloadDelegate( arg0,  arg1,  arg2);
                result = workloadDelegate( arg0,  arg1,  arg2);
                result = workloadDelegate( arg0,  arg1,  arg2);
            }
            NonGenericKeepAliveWithoutBoxing(result);
        }

        private void WorkloadActionNoUnroll(long invokeCount)
        {
             System.Double arg0 =  __argField0;
 System.Double arg1 =  __argField1;
 System.Double arg2 =  __argField2;
            void result = default(void);
            for (long i = 0; i < invokeCount; i++)
            {
                result = workloadDelegate( arg0,  arg1,  arg2);
            }
            NonGenericKeepAliveWithoutBoxing(result);
        }

        // we must not simply use DeadCodeEliminationHelper.KeepAliveWithoutBoxing<T> because it's generic method
        // and stack-only types like Span<T> can not be generic type arguments http://adamsitnik.com/Span/#span-must-not-be-a-generic-type-argument
        [MethodImpl(MethodImplOptions.NoInlining)]
        private void NonGenericKeepAliveWithoutBoxing(void _) { }

        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
        public void __ForDisassemblyDiagnoser__()
        {
            if (NotEleven == 11)
            {
                 System.Double arg0 =  __argField0;
 System.Double arg1 =  __argField1;
 System.Double arg2 =  __argField2;
                return Bench( arg0,  arg1,  arg2);
            }
            
            return default(void);
        }

#elif RETURNS_BYREF_0

        private void OverheadActionUnroll(long invokeCount)
        {
             System.Double arg0 =  __argField0;
 System.Double arg1 =  __argField1;
 System.Double arg2 =  __argField2;
            void value = default(void);
            for (long i = 0; i < invokeCount; i++)
            {
                value = overheadDelegate( arg0,  arg1,  arg2);
                value = overheadDelegate( arg0,  arg1,  arg2);
                value = overheadDelegate( arg0,  arg1,  arg2);
                value = overheadDelegate( arg0,  arg1,  arg2);
                value = overheadDelegate( arg0,  arg1,  arg2);
                value = overheadDelegate( arg0,  arg1,  arg2);
                value = overheadDelegate( arg0,  arg1,  arg2);
                value = overheadDelegate( arg0,  arg1,  arg2);
                value = overheadDelegate( arg0,  arg1,  arg2);
                value = overheadDelegate( arg0,  arg1,  arg2);
                value = overheadDelegate( arg0,  arg1,  arg2);
                value = overheadDelegate( arg0,  arg1,  arg2);
                value = overheadDelegate( arg0,  arg1,  arg2);
                value = overheadDelegate( arg0,  arg1,  arg2);
                value = overheadDelegate( arg0,  arg1,  arg2);
                value = overheadDelegate( arg0,  arg1,  arg2);
            }
            DeadCodeEliminationHelper.KeepAliveWithoutBoxing(value);
        }

        private void OverheadActionNoUnroll(long invokeCount)
        {
             System.Double arg0 =  __argField0;
 System.Double arg1 =  __argField1;
 System.Double arg2 =  __argField2;
            void value = default(void);
            for (long i = 0; i < invokeCount; i++)
            {
                value = overheadDelegate( arg0,  arg1,  arg2);
            }
            DeadCodeEliminationHelper.KeepAliveWithoutBoxing(value);
        }

        private void workloadDefaultValueHolder = default(void);

        private void WorkloadActionUnroll(long invokeCount)
        {
             System.Double arg0 =  __argField0;
 System.Double arg1 =  __argField1;
 System.Double arg2 =  __argField2;
            ref void alias = ref workloadDefaultValueHolder;
            for (long i = 0; i < invokeCount; i++)
            {
                alias = workloadDelegate( arg0,  arg1,  arg2);
                alias = workloadDelegate( arg0,  arg1,  arg2);
                alias = workloadDelegate( arg0,  arg1,  arg2);
                alias = workloadDelegate( arg0,  arg1,  arg2);
                alias = workloadDelegate( arg0,  arg1,  arg2);
                alias = workloadDelegate( arg0,  arg1,  arg2);
                alias = workloadDelegate( arg0,  arg1,  arg2);
                alias = workloadDelegate( arg0,  arg1,  arg2);
                alias = workloadDelegate( arg0,  arg1,  arg2);
                alias = workloadDelegate( arg0,  arg1,  arg2);
                alias = workloadDelegate( arg0,  arg1,  arg2);
                alias = workloadDelegate( arg0,  arg1,  arg2);
                alias = workloadDelegate( arg0,  arg1,  arg2);
                alias = workloadDelegate( arg0,  arg1,  arg2);
                alias = workloadDelegate( arg0,  arg1,  arg2);
                alias = workloadDelegate( arg0,  arg1,  arg2);
            }
            DeadCodeEliminationHelper.KeepAliveWithoutBoxing(ref alias);
        }
        
        private void WorkloadActionNoUnroll(long invokeCount)
        {
             System.Double arg0 =  __argField0;
 System.Double arg1 =  __argField1;
 System.Double arg2 =  __argField2;
            ref void alias = ref workloadDefaultValueHolder;
            for (long i = 0; i < invokeCount; i++)
            {
                alias = workloadDelegate( arg0,  arg1,  arg2);
            }
            DeadCodeEliminationHelper.KeepAliveWithoutBoxing(ref alias);
        }

        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
        public ref void __ForDisassemblyDiagnoser__()
        {
            if (NotEleven == 11)
            {
                 System.Double arg0 =  __argField0;
 System.Double arg1 =  __argField1;
 System.Double arg2 =  __argField2;
                return ref Bench( arg0,  arg1,  arg2);
            }
            
            return ref workloadDefaultValueHolder;
        }
#elif RETURNS_VOID_0

        private void OverheadActionUnroll(long invokeCount)
        {
             System.Double arg0 =  __argField0;
 System.Double arg1 =  __argField1;
 System.Double arg2 =  __argField2;
            for (long i = 0; i < invokeCount; i++)
            {
                overheadDelegate( arg0,  arg1,  arg2);
                overheadDelegate( arg0,  arg1,  arg2);
                overheadDelegate( arg0,  arg1,  arg2);
                overheadDelegate( arg0,  arg1,  arg2);
                overheadDelegate( arg0,  arg1,  arg2);
                overheadDelegate( arg0,  arg1,  arg2);
                overheadDelegate( arg0,  arg1,  arg2);
                overheadDelegate( arg0,  arg1,  arg2);
                overheadDelegate( arg0,  arg1,  arg2);
                overheadDelegate( arg0,  arg1,  arg2);
                overheadDelegate( arg0,  arg1,  arg2);
                overheadDelegate( arg0,  arg1,  arg2);
                overheadDelegate( arg0,  arg1,  arg2);
                overheadDelegate( arg0,  arg1,  arg2);
                overheadDelegate( arg0,  arg1,  arg2);
                overheadDelegate( arg0,  arg1,  arg2);
            }
        }

        private void OverheadActionNoUnroll(long invokeCount)
        {
             System.Double arg0 =  __argField0;
 System.Double arg1 =  __argField1;
 System.Double arg2 =  __argField2;
            for (long i = 0; i < invokeCount; i++)
            {
                overheadDelegate( arg0,  arg1,  arg2);
            }
        }

        private void WorkloadActionUnroll(long invokeCount)
        {
             System.Double arg0 =  __argField0;
 System.Double arg1 =  __argField1;
 System.Double arg2 =  __argField2;
            for (long i = 0; i < invokeCount; i++)
            {
                workloadDelegate( arg0,  arg1,  arg2);
                workloadDelegate( arg0,  arg1,  arg2);
                workloadDelegate( arg0,  arg1,  arg2);
                workloadDelegate( arg0,  arg1,  arg2);
                workloadDelegate( arg0,  arg1,  arg2);
                workloadDelegate( arg0,  arg1,  arg2);
                workloadDelegate( arg0,  arg1,  arg2);
                workloadDelegate( arg0,  arg1,  arg2);
                workloadDelegate( arg0,  arg1,  arg2);
                workloadDelegate( arg0,  arg1,  arg2);
                workloadDelegate( arg0,  arg1,  arg2);
                workloadDelegate( arg0,  arg1,  arg2);
                workloadDelegate( arg0,  arg1,  arg2);
                workloadDelegate( arg0,  arg1,  arg2);
                workloadDelegate( arg0,  arg1,  arg2);
                workloadDelegate( arg0,  arg1,  arg2);
            }
        }

        private void WorkloadActionNoUnroll(long invokeCount)
        {
             System.Double arg0 =  __argField0;
 System.Double arg1 =  __argField1;
 System.Double arg2 =  __argField2;
            for (long i = 0; i < invokeCount; i++)
            {
                workloadDelegate( arg0,  arg1,  arg2);
            }
        }

        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
        public void __ForDisassemblyDiagnoser__()
        {
            if (NotEleven == 11)
            {
                 System.Double arg0 =  __argField0;
 System.Double arg1 =  __argField1;
 System.Double arg2 =  __argField2;
                Bench( arg0,  arg1,  arg2);
            }
        }
#endif
    }
    // the type name must be in sync with WindowsDisassembler.BuildArguments
    public class Runnable_1 : global::benchmarks.MyBenchmark
    {
        public static void Run(BenchmarkDotNet.Engines.IHost host, string benchmarkName)
        {
            Runnable_1 instance = new Runnable_1(); // do NOT change name "instance" (used in SmartParamameter)
            

            host.WriteLine();
            foreach (var infoLine in BenchmarkEnvironmentInfo.GetCurrent().ToFormattedString())
            {
                host.WriteLine("// {0}", infoLine);
            }
            var job = new BenchmarkDotNet.Jobs.Job(); // use full name to avoid naming conflicts, #778
            BenchmarkDotNet.Characteristics.CharacteristicObject.IdCharacteristic[job] = $@"ShortRun";
                BenchmarkDotNet.Jobs.RunMode.IterationCountCharacteristic[job] = 3;
                BenchmarkDotNet.Jobs.RunMode.LaunchCountCharacteristic[job] = 1;
                BenchmarkDotNet.Jobs.RunMode.WarmupCountCharacteristic[job] = 3;
            job.Freeze();
            host.WriteLine("// Job: {0}", job.DisplayInfo);
            host.WriteLine();

            var errors = BenchmarkEnvironmentInfo.Validate(job);
            if (ValidationErrorReporter.ReportIfAny(errors, host))
                return;

            var engineParameters = new BenchmarkDotNet.Engines.EngineParameters()
            {
                Host = host,
                WorkloadActionUnroll = instance.WorkloadActionUnroll,
                WorkloadActionNoUnroll = instance.WorkloadActionNoUnroll,
                Dummy1Action = instance.Dummy1,
                Dummy2Action = instance.Dummy2,
                Dummy3Action = instance.Dummy3,
                OverheadActionNoUnroll = instance.OverheadActionNoUnroll,
                OverheadActionUnroll = instance.OverheadActionUnroll,
                GlobalSetupAction = instance.globalSetupAction,
                GlobalCleanupAction = instance.globalCleanupAction,
                IterationSetupAction = instance.iterationSetupAction,
                IterationCleanupAction = instance.iterationCleanupAction,
                TargetJob = job,
                OperationsPerInvoke = 1,
                MeasureGcStats = false,
                Encoding = System.Text.Encoding.ASCII,
                BenchmarkName = benchmarkName
            };

            using (var engine = new BenchmarkDotNet.Engines.EngineFactory().CreateReadyToRun(engineParameters))
            {
                var results = engine.Run();

                host.ReportResults(results); // printing costs memory, do this after runs

                instance.__TrickTheJIT__(); // compile the method for disassembler, but without actual run of the benchmark ;)
            }
        }

        public delegate void OverheadDelegate( System.Double arg0,  System.Double arg1,  System.Double arg2);

        public delegate  void WorkloadDelegate( System.Double arg0,  System.Double arg1,  System.Double arg2);

        public Runnable_1()
        {
            globalSetupAction = () => { };
            globalCleanupAction = () => { };
            iterationSetupAction = () => { };
            iterationCleanupAction = () => { };
            overheadDelegate = __Overhead;
            workloadDelegate = Bench;
            __argField0 = 5500;
__argField1 = 10;
__argField2 = 4;
        }

        private Action globalSetupAction;
        private Action globalCleanupAction;
        private Action iterationSetupAction;
        private Action iterationCleanupAction;
        private OverheadDelegate overheadDelegate;
        private WorkloadDelegate workloadDelegate;
        private System.Double __argField0;
private System.Double __argField1;
private System.Double __argField2;

        // this method is used only for the disassembly diagnoser purposes
        // the goal is to get this and the benchmarked method jitted, but without executing the benchmarked method itself
        public int NotEleven;
        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoOptimization | System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
        public void __TrickTheJIT__()
        {
            NotEleven = new System.Random(123).Next(0, 10);
            __ForDisassemblyDiagnoser__();
        }

        private int dummyVar;

        [MethodImpl(MethodImplOptions.NoInlining)]
        private void Dummy1()
        {
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        private void Dummy2()
        {
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
        }

        [MethodImpl(MethodImplOptions.NoInlining)]
        private void Dummy3()
        {
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
            dummyVar++;
        }

        private void __Overhead( System.Double arg0,  System.Double arg1,  System.Double arg2) // __ is to avoid possible name conflict
        {
            
        }

#if RETURNS_CONSUMABLE_1

        private BenchmarkDotNet.Engines.Consumer consumer = new BenchmarkDotNet.Engines.Consumer();

        private void OverheadActionUnroll(long invokeCount)
        {
             System.Double arg0 =  __argField0;
 System.Double arg1 =  __argField1;
 System.Double arg2 =  __argField2;
            for (long i = 0; i < invokeCount; i++)
            {
                consumer.Consume(overheadDelegate( arg0,  arg1,  arg2));
                consumer.Consume(overheadDelegate( arg0,  arg1,  arg2));
                consumer.Consume(overheadDelegate( arg0,  arg1,  arg2));
                consumer.Consume(overheadDelegate( arg0,  arg1,  arg2));
                consumer.Consume(overheadDelegate( arg0,  arg1,  arg2));
                consumer.Consume(overheadDelegate( arg0,  arg1,  arg2));
                consumer.Consume(overheadDelegate( arg0,  arg1,  arg2));
                consumer.Consume(overheadDelegate( arg0,  arg1,  arg2));
                consumer.Consume(overheadDelegate( arg0,  arg1,  arg2));
                consumer.Consume(overheadDelegate( arg0,  arg1,  arg2));
                consumer.Consume(overheadDelegate( arg0,  arg1,  arg2));
                consumer.Consume(overheadDelegate( arg0,  arg1,  arg2));
                consumer.Consume(overheadDelegate( arg0,  arg1,  arg2));
                consumer.Consume(overheadDelegate( arg0,  arg1,  arg2));
                consumer.Consume(overheadDelegate( arg0,  arg1,  arg2));
                consumer.Consume(overheadDelegate( arg0,  arg1,  arg2));
            }
        }

        private void OverheadActionNoUnroll(long invokeCount)
        {
             System.Double arg0 =  __argField0;
 System.Double arg1 =  __argField1;
 System.Double arg2 =  __argField2;
            for (long i = 0; i < invokeCount; i++)
            {
                consumer.Consume(overheadDelegate( arg0,  arg1,  arg2));
            }
        }
        
        private void WorkloadActionUnroll(long invokeCount)
        {
             System.Double arg0 =  __argField0;
 System.Double arg1 =  __argField1;
 System.Double arg2 =  __argField2;
            for (long i = 0; i < invokeCount; i++)
            {
                consumer.Consume(workloadDelegate( arg0,  arg1,  arg2));
                consumer.Consume(workloadDelegate( arg0,  arg1,  arg2));
                consumer.Consume(workloadDelegate( arg0,  arg1,  arg2));
                consumer.Consume(workloadDelegate( arg0,  arg1,  arg2));
                consumer.Consume(workloadDelegate( arg0,  arg1,  arg2));
                consumer.Consume(workloadDelegate( arg0,  arg1,  arg2));
                consumer.Consume(workloadDelegate( arg0,  arg1,  arg2));
                consumer.Consume(workloadDelegate( arg0,  arg1,  arg2));
                consumer.Consume(workloadDelegate( arg0,  arg1,  arg2));
                consumer.Consume(workloadDelegate( arg0,  arg1,  arg2));
                consumer.Consume(workloadDelegate( arg0,  arg1,  arg2));
                consumer.Consume(workloadDelegate( arg0,  arg1,  arg2));
                consumer.Consume(workloadDelegate( arg0,  arg1,  arg2));
                consumer.Consume(workloadDelegate( arg0,  arg1,  arg2));
                consumer.Consume(workloadDelegate( arg0,  arg1,  arg2));
                consumer.Consume(workloadDelegate( arg0,  arg1,  arg2));
            }
        }

        private void WorkloadActionNoUnroll(long invokeCount)
        {
             System.Double arg0 =  __argField0;
 System.Double arg1 =  __argField1;
 System.Double arg2 =  __argField2;
            for (long i = 0; i < invokeCount; i++)
            {
                consumer.Consume(workloadDelegate( arg0,  arg1,  arg2));
            }
        }
        
        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
        public void __ForDisassemblyDiagnoser__()
        {
            if (NotEleven == 11)
            {
                 System.Double arg0 =  __argField0;
 System.Double arg1 =  __argField1;
 System.Double arg2 =  __argField2;
                return Bench( arg0,  arg1,  arg2);
            }
            
            return default(void);
        }

#elif RETURNS_NON_CONSUMABLE_STRUCT_1

        private void OverheadActionUnroll(long invokeCount)
        {
             System.Double arg0 =  __argField0;
 System.Double arg1 =  __argField1;
 System.Double arg2 =  __argField2;
            void result = default(void);
            for (long i = 0; i < invokeCount; i++)
            {
                result = overheadDelegate( arg0,  arg1,  arg2);
                result = overheadDelegate( arg0,  arg1,  arg2);
                result = overheadDelegate( arg0,  arg1,  arg2);
                result = overheadDelegate( arg0,  arg1,  arg2);
                result = overheadDelegate( arg0,  arg1,  arg2);
                result = overheadDelegate( arg0,  arg1,  arg2);
                result = overheadDelegate( arg0,  arg1,  arg2);
                result = overheadDelegate( arg0,  arg1,  arg2);
                result = overheadDelegate( arg0,  arg1,  arg2);
                result = overheadDelegate( arg0,  arg1,  arg2);
                result = overheadDelegate( arg0,  arg1,  arg2);
                result = overheadDelegate( arg0,  arg1,  arg2);
                result = overheadDelegate( arg0,  arg1,  arg2);
                result = overheadDelegate( arg0,  arg1,  arg2);
                result = overheadDelegate( arg0,  arg1,  arg2);
                result = overheadDelegate( arg0,  arg1,  arg2);
            }
            DeadCodeEliminationHelper.KeepAliveWithoutBoxing(result);
        }

        private void OverheadActionNoUnroll(long invokeCount)
        {
             System.Double arg0 =  __argField0;
 System.Double arg1 =  __argField1;
 System.Double arg2 =  __argField2;
            void result = default(void);
            for (long i = 0; i < invokeCount; i++)
            {
                result = overheadDelegate( arg0,  arg1,  arg2);
            }
            DeadCodeEliminationHelper.KeepAliveWithoutBoxing(result);
        }

        private void WorkloadActionUnroll(long invokeCount)
        {
             System.Double arg0 =  __argField0;
 System.Double arg1 =  __argField1;
 System.Double arg2 =  __argField2;
            void result = default(void);
            for (long i = 0; i < invokeCount; i++)
            {
                result = workloadDelegate( arg0,  arg1,  arg2);
                result = workloadDelegate( arg0,  arg1,  arg2);
                result = workloadDelegate( arg0,  arg1,  arg2);
                result = workloadDelegate( arg0,  arg1,  arg2);
                result = workloadDelegate( arg0,  arg1,  arg2);
                result = workloadDelegate( arg0,  arg1,  arg2);
                result = workloadDelegate( arg0,  arg1,  arg2);
                result = workloadDelegate( arg0,  arg1,  arg2);
                result = workloadDelegate( arg0,  arg1,  arg2);
                result = workloadDelegate( arg0,  arg1,  arg2);
                result = workloadDelegate( arg0,  arg1,  arg2);
                result = workloadDelegate( arg0,  arg1,  arg2);
                result = workloadDelegate( arg0,  arg1,  arg2);
                result = workloadDelegate( arg0,  arg1,  arg2);
                result = workloadDelegate( arg0,  arg1,  arg2);
                result = workloadDelegate( arg0,  arg1,  arg2);
            }
            NonGenericKeepAliveWithoutBoxing(result);
        }

        private void WorkloadActionNoUnroll(long invokeCount)
        {
             System.Double arg0 =  __argField0;
 System.Double arg1 =  __argField1;
 System.Double arg2 =  __argField2;
            void result = default(void);
            for (long i = 0; i < invokeCount; i++)
            {
                result = workloadDelegate( arg0,  arg1,  arg2);
            }
            NonGenericKeepAliveWithoutBoxing(result);
        }

        // we must not simply use DeadCodeEliminationHelper.KeepAliveWithoutBoxing<T> because it's generic method
        // and stack-only types like Span<T> can not be generic type arguments http://adamsitnik.com/Span/#span-must-not-be-a-generic-type-argument
        [MethodImpl(MethodImplOptions.NoInlining)]
        private void NonGenericKeepAliveWithoutBoxing(void _) { }

        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
        public void __ForDisassemblyDiagnoser__()
        {
            if (NotEleven == 11)
            {
                 System.Double arg0 =  __argField0;
 System.Double arg1 =  __argField1;
 System.Double arg2 =  __argField2;
                return Bench( arg0,  arg1,  arg2);
            }
            
            return default(void);
        }

#elif RETURNS_BYREF_1

        private void OverheadActionUnroll(long invokeCount)
        {
             System.Double arg0 =  __argField0;
 System.Double arg1 =  __argField1;
 System.Double arg2 =  __argField2;
            void value = default(void);
            for (long i = 0; i < invokeCount; i++)
            {
                value = overheadDelegate( arg0,  arg1,  arg2);
                value = overheadDelegate( arg0,  arg1,  arg2);
                value = overheadDelegate( arg0,  arg1,  arg2);
                value = overheadDelegate( arg0,  arg1,  arg2);
                value = overheadDelegate( arg0,  arg1,  arg2);
                value = overheadDelegate( arg0,  arg1,  arg2);
                value = overheadDelegate( arg0,  arg1,  arg2);
                value = overheadDelegate( arg0,  arg1,  arg2);
                value = overheadDelegate( arg0,  arg1,  arg2);
                value = overheadDelegate( arg0,  arg1,  arg2);
                value = overheadDelegate( arg0,  arg1,  arg2);
                value = overheadDelegate( arg0,  arg1,  arg2);
                value = overheadDelegate( arg0,  arg1,  arg2);
                value = overheadDelegate( arg0,  arg1,  arg2);
                value = overheadDelegate( arg0,  arg1,  arg2);
                value = overheadDelegate( arg0,  arg1,  arg2);
            }
            DeadCodeEliminationHelper.KeepAliveWithoutBoxing(value);
        }

        private void OverheadActionNoUnroll(long invokeCount)
        {
             System.Double arg0 =  __argField0;
 System.Double arg1 =  __argField1;
 System.Double arg2 =  __argField2;
            void value = default(void);
            for (long i = 0; i < invokeCount; i++)
            {
                value = overheadDelegate( arg0,  arg1,  arg2);
            }
            DeadCodeEliminationHelper.KeepAliveWithoutBoxing(value);
        }

        private void workloadDefaultValueHolder = default(void);

        private void WorkloadActionUnroll(long invokeCount)
        {
             System.Double arg0 =  __argField0;
 System.Double arg1 =  __argField1;
 System.Double arg2 =  __argField2;
            ref void alias = ref workloadDefaultValueHolder;
            for (long i = 0; i < invokeCount; i++)
            {
                alias = workloadDelegate( arg0,  arg1,  arg2);
                alias = workloadDelegate( arg0,  arg1,  arg2);
                alias = workloadDelegate( arg0,  arg1,  arg2);
                alias = workloadDelegate( arg0,  arg1,  arg2);
                alias = workloadDelegate( arg0,  arg1,  arg2);
                alias = workloadDelegate( arg0,  arg1,  arg2);
                alias = workloadDelegate( arg0,  arg1,  arg2);
                alias = workloadDelegate( arg0,  arg1,  arg2);
                alias = workloadDelegate( arg0,  arg1,  arg2);
                alias = workloadDelegate( arg0,  arg1,  arg2);
                alias = workloadDelegate( arg0,  arg1,  arg2);
                alias = workloadDelegate( arg0,  arg1,  arg2);
                alias = workloadDelegate( arg0,  arg1,  arg2);
                alias = workloadDelegate( arg0,  arg1,  arg2);
                alias = workloadDelegate( arg0,  arg1,  arg2);
                alias = workloadDelegate( arg0,  arg1,  arg2);
            }
            DeadCodeEliminationHelper.KeepAliveWithoutBoxing(ref alias);
        }
        
        private void WorkloadActionNoUnroll(long invokeCount)
        {
             System.Double arg0 =  __argField0;
 System.Double arg1 =  __argField1;
 System.Double arg2 =  __argField2;
            ref void alias = ref workloadDefaultValueHolder;
            for (long i = 0; i < invokeCount; i++)
            {
                alias = workloadDelegate( arg0,  arg1,  arg2);
            }
            DeadCodeEliminationHelper.KeepAliveWithoutBoxing(ref alias);
        }

        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
        public ref void __ForDisassemblyDiagnoser__()
        {
            if (NotEleven == 11)
            {
                 System.Double arg0 =  __argField0;
 System.Double arg1 =  __argField1;
 System.Double arg2 =  __argField2;
                return ref Bench( arg0,  arg1,  arg2);
            }
            
            return ref workloadDefaultValueHolder;
        }
#elif RETURNS_VOID_1

        private void OverheadActionUnroll(long invokeCount)
        {
             System.Double arg0 =  __argField0;
 System.Double arg1 =  __argField1;
 System.Double arg2 =  __argField2;
            for (long i = 0; i < invokeCount; i++)
            {
                overheadDelegate( arg0,  arg1,  arg2);
                overheadDelegate( arg0,  arg1,  arg2);
                overheadDelegate( arg0,  arg1,  arg2);
                overheadDelegate( arg0,  arg1,  arg2);
                overheadDelegate( arg0,  arg1,  arg2);
                overheadDelegate( arg0,  arg1,  arg2);
                overheadDelegate( arg0,  arg1,  arg2);
                overheadDelegate( arg0,  arg1,  arg2);
                overheadDelegate( arg0,  arg1,  arg2);
                overheadDelegate( arg0,  arg1,  arg2);
                overheadDelegate( arg0,  arg1,  arg2);
                overheadDelegate( arg0,  arg1,  arg2);
                overheadDelegate( arg0,  arg1,  arg2);
                overheadDelegate( arg0,  arg1,  arg2);
                overheadDelegate( arg0,  arg1,  arg2);
                overheadDelegate( arg0,  arg1,  arg2);
            }
        }

        private void OverheadActionNoUnroll(long invokeCount)
        {
             System.Double arg0 =  __argField0;
 System.Double arg1 =  __argField1;
 System.Double arg2 =  __argField2;
            for (long i = 0; i < invokeCount; i++)
            {
                overheadDelegate( arg0,  arg1,  arg2);
            }
        }

        private void WorkloadActionUnroll(long invokeCount)
        {
             System.Double arg0 =  __argField0;
 System.Double arg1 =  __argField1;
 System.Double arg2 =  __argField2;
            for (long i = 0; i < invokeCount; i++)
            {
                workloadDelegate( arg0,  arg1,  arg2);
                workloadDelegate( arg0,  arg1,  arg2);
                workloadDelegate( arg0,  arg1,  arg2);
                workloadDelegate( arg0,  arg1,  arg2);
                workloadDelegate( arg0,  arg1,  arg2);
                workloadDelegate( arg0,  arg1,  arg2);
                workloadDelegate( arg0,  arg1,  arg2);
                workloadDelegate( arg0,  arg1,  arg2);
                workloadDelegate( arg0,  arg1,  arg2);
                workloadDelegate( arg0,  arg1,  arg2);
                workloadDelegate( arg0,  arg1,  arg2);
                workloadDelegate( arg0,  arg1,  arg2);
                workloadDelegate( arg0,  arg1,  arg2);
                workloadDelegate( arg0,  arg1,  arg2);
                workloadDelegate( arg0,  arg1,  arg2);
                workloadDelegate( arg0,  arg1,  arg2);
            }
        }

        private void WorkloadActionNoUnroll(long invokeCount)
        {
             System.Double arg0 =  __argField0;
 System.Double arg1 =  __argField1;
 System.Double arg2 =  __argField2;
            for (long i = 0; i < invokeCount; i++)
            {
                workloadDelegate( arg0,  arg1,  arg2);
            }
        }

        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.NoInlining)]
        public void __ForDisassemblyDiagnoser__()
        {
            if (NotEleven == 11)
            {
                 System.Double arg0 =  __argField0;
 System.Double arg1 =  __argField1;
 System.Double arg2 =  __argField2;
                Bench( arg0,  arg1,  arg2);
            }
        }
#endif
    }
}
